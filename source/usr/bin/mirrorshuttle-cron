#!/bin/bash
#
# Copyright Derek Macias (parts of code from NUT package)
# Copyright macester (parts of code from NUT package)
# Copyright gfjardim (parts of code from NUT package)
# Copyright SimonF (parts of code from NUT package)
# Copyright Lime Technology (any and all other parts of Unraid)
#
# Copyright desertwitch (as author and maintainer of this file)
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License 2
# as published by the Free Software Foundation.
#
# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Software.
#
umask 000

NOTIFY_BIN="/usr/local/emhttp/plugins/dynamix/scripts/notify"
HOST=$(echo "$HOSTNAME" | awk '{print toupper($0)}')
EVENT="MirrorShuttle"
SUBJECT="[${HOST}] MirrorShuttle:"

if pgrep -x mirrorshuttle &>/dev/null; then
    echo "mirrorshuttle is already running; exiting" | logger -s -t "mirrorshuttle-cron"
    exit 0
fi

if [ ! -r "/boot/config/plugins/mirsht/mirsht.cfg" ]; then
    echo "configuration file cannot be read; exiting" | logger -s -t "mirrorshuttle-cron"
    exit 0
fi

# shellcheck disable=SC1091
source "/boot/config/plugins/mirsht/mirsht.cfg"

if [[ "$CRON" != "hourly" && "$CRON" != "daily" && "$CRON" != "weekly" && "$CRON" != "monthly" ]]; then
    exit 0
fi

if [ "$MOVERSTART" != "enable" ] && [ -e "/var/run/mover.pid" ]; then
    echo "mover is running; exiting" | logger -s -t "mirrorshuttle-cron"
    [ "$ERRORNOTIFY" == "enable" ] && "$NOTIFY_BIN" -e "${EVENT}" -s "Alert ${SUBJECT} Failure" -d "The scheduled moving has failed (mover is running)." -i "alert"
    exit 0
fi

if [ "$PARITYSTART" != "enable" ] && [ -r "/var/local/emhttp/var.ini" ]; then
    PARITYPOS=$(grep "mdResyncPos=" < /var/local/emhttp/var.ini | cut -d'"' -f2)
    if [ -n "$PARITYPOS" ] && [ "$PARITYPOS" -gt 0 ]; then
        echo "parity operation is running; exiting" | logger -s -t "mirrorshuttle-cron"
        [ "$ERRORNOTIFY" == "enable" ] && "$NOTIFY_BIN" -e "${EVENT}" -s "Alert ${SUBJECT} Failure" -d "The scheduled moving has failed (parity operation in progress)." -i "alert"
        exit 0
    fi
fi

echo "move: started" | logger -s -t "mirrorshuttle-cron"

if [ "$STARTNOTIFY" == "enable" ]; then
    if [ "$INITAFTER" == "enable" ]; then
        "$NOTIFY_BIN" -e "${EVENT}" -s "Notice ${SUBJECT} Started" -d "The scheduled moving (and re-init) has started." -i "warning"
    else
        "$NOTIFY_BIN" -e "${EVENT}" -s "Notice ${SUBJECT} Started" -d "The scheduled moving has started." -i "warning"
    fi
fi

/usr/bin/mirrorshuttle --mode=move --config=/boot/config/plugins/mirsht/config.yaml --json 1>/dev/null 2>/tmp/mirrorshuttle.json
RET=$?

FILES_MOVED=$(grep -c '"msg":"file moved"' /tmp/mirrorshuttle.json 2>/dev/null)
DIRS_CREATED=$(grep -c '"msg":"directory created"' /tmp/mirrorshuttle.json 2>/dev/null)

case "$RET" in
  0)
    echo "move: finished (return code: $RET - success) (created $DIRS_CREATED dirs, moved $FILES_MOVED files)" | logger -s -t "mirrorshuttle-cron"

    # If re-init was also requested, notify of overall success later (so only once).
    if [ "$FINISHNOTIFY" == "enable" ] && [ "$INITAFTER" != "enable" ]; then
        "$NOTIFY_BIN" -e "${EVENT}" -s "Notice ${SUBJECT} Finished" -d "The scheduled moving has finished with success (created $DIRS_CREATED dirs, moved $FILES_MOVED files)." -i "normal"
    fi
    ;;
  1)
    echo "move: finished (return code: $RET - failure) (created $DIRS_CREATED dirs, moved $FILES_MOVED files)" | logger -s -t "mirrorshuttle-cron"
    [ "$ERRORNOTIFY" == "enable" ] && "$NOTIFY_BIN" -e "${EVENT}" -s "Alert ${SUBJECT} Move Failure" -d "The scheduled moving has failed with errors (created $DIRS_CREATED dirs, moved $FILES_MOVED files)." -i "alert"
    ;;
  2)
    echo "move: finished (return code: $RET - partial failure) (created $DIRS_CREATED dirs, moved $FILES_MOVED files)" | logger -s -t "mirrorshuttle-cron"
    [ "$ERRORNOTIFY" == "enable" ] && "$NOTIFY_BIN" -e "${EVENT}" -s "Alert ${SUBJECT} Move Partial Failure" -d "The scheduled moving has failed to move all files (created $DIRS_CREATED dirs, moved $FILES_MOVED files)." -i "alert"
    ;;
  4)
    echo "move: finished (return code: $RET - invalid configuration) (created $DIRS_CREATED dirs, moved $FILES_MOVED files)" | logger -s -t "mirrorshuttle-cron"
    [ "$ERRORNOTIFY" == "enable" ] && "$NOTIFY_BIN" -e "${EVENT}" -s "Alert ${SUBJECT} Move Failure" -d "The scheduled moving has failed due to an invalid configuration (created $DIRS_CREATED dirs, moved $FILES_MOVED files)." -i "alert"
    ;;
  *)
    echo "move: finished (return code: $RET - unexpected return code) (created $DIRS_CREATED dirs, moved $FILES_MOVED files)" | logger -s -t "mirrorshuttle-cron"
    [ "$ERRORNOTIFY" == "enable" ] && "$NOTIFY_BIN" -e "${EVENT}" -s "Alert ${SUBJECT} Move Failure" -d "The scheduled moving has failed with an unexpected return code (created $DIRS_CREATED dirs, moved $FILES_MOVED files)." -i "alert"
    ;;
esac

sync
sleep 1

if [ "$RET" -gt 0 ] || [ "$INITAFTER" != "enable" ]; then
    exit 0
fi

echo "re-init: started" | logger -s -t "mirrorshuttle-cron"

/usr/bin/mirrorshuttle --mode=init --config=/boot/config/plugins/mirsht/config.yaml --json 1>/dev/null 2>>/tmp/mirrorshuttle.json
RET=$?

DIRS_TOTAL=$(grep -c '"msg":"directory created"' /tmp/mirrorshuttle.json 2>/dev/null)
DIRS_MIRRORED=$((DIRS_TOTAL - DIRS_CREATED))
[ "$DIRS_MIRRORED" -lt 0 ] && DIRS_MIRRORED=0

case "$RET" in
  0)
    echo "re-init: finished (return code: $RET - success) (re-inited $DIRS_MIRRORED dirs)" | logger -s -t "mirrorshuttle-cron"
    [ "$FINISHNOTIFY" == "enable" ] && "$NOTIFY_BIN" -e "${EVENT}" -s "Notice ${SUBJECT} Finished" -d "The scheduled moving (and re-init) has finished with success (created $DIRS_CREATED dirs, moved $FILES_MOVED files, re-inited $DIRS_MIRRORED dirs)." -i "normal"
    ;;
  1)
    echo "re-init: finished (return code: $RET - failure) (re-inited $DIRS_MIRRORED dirs)" | logger -s -t "mirrorshuttle-cron"
    [ "$ERRORNOTIFY" == "enable" ] && "$NOTIFY_BIN" -e "${EVENT}" -s "Alert ${SUBJECT} Re-Init Failure" -d "The scheduled re-init has failed with errors (created $DIRS_CREATED dirs, moved $FILES_MOVED files, re-inited $DIRS_MIRRORED dirs)." -i "alert"
    ;;
  2)
    echo "re-init: finished (return code: $RET - partial failure) (re-inited $DIRS_MIRRORED dirs)" | logger -s -t "mirrorshuttle-cron"
    [ "$ERRORNOTIFY" == "enable" ] && "$NOTIFY_BIN" -e "${EVENT}" -s "Alert ${SUBJECT} Re-Init Partial Failure" -d "The scheduled re-init has failed to move all files (created $DIRS_CREATED dirs, moved $FILES_MOVED files, re-inited $DIRS_MIRRORED dirs)." -i "alert"
    ;;
  3)
    echo "re-init: finished (return code: $RET - unmoved files in mirror) (re-inited $DIRS_MIRRORED dirs)" | logger -s -t "mirrorshuttle-cron"
    [ "$ERRORNOTIFY" == "enable" ] && "$NOTIFY_BIN" -e "${EVENT}" -s "Alert ${SUBJECT} Re-Init Failure" -d "The scheduled re-init has failed due to unmoved files in the mirror (created $DIRS_CREATED dirs, moved $FILES_MOVED files, re-inited $DIRS_MIRRORED dirs)." -i "alert"
    ;;
  4)
    echo "re-init: finished (return code: $RET - invalid configuration) (re-inited $DIRS_MIRRORED dirs)" | logger -s -t "mirrorshuttle-cron"
    [ "$ERRORNOTIFY" == "enable" ] && "$NOTIFY_BIN" -e "${EVENT}" -s "Alert ${SUBJECT} Re-Init Failure" -d "The scheduled re-init has failed due to an invalid configuration (created $DIRS_CREATED dirs, moved $FILES_MOVED files, re-inited $DIRS_MIRRORED dirs)." -i "alert"
    ;;
  *)
    echo "re-init: finished (return code: $RET - unexpected return code) (re-inited $DIRS_MIRRORED dirs)" | logger -s -t "mirrorshuttle-cron"
    [ "$ERRORNOTIFY" == "enable" ] && "$NOTIFY_BIN" -e "${EVENT}" -s "Alert ${SUBJECT} Re-Init Failure" -d "The scheduled re-init has failed with an unexpected return code (created $DIRS_CREATED dirs, moved $FILES_MOVED files, re-inited $DIRS_MIRRORED dirs)." -i "alert"
    ;;
esac

sync
sleep 1

exit 0
